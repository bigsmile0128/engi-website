# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# build the Docker image and push it to ECR
# then invoke Terraform Cloud to deploy the new image

orbs:
  aws-ecr: circleci/aws-ecr@8.1.2
  terraform: circleci/terraform@3.0.1

parameters:
  terraform-setup:
    type: string
    default: deploy/setup/engi-website

commands:
  terraform-deploy:
    steps:
      - run:
          name: 'Checkout Terraform sources'
          command: |
            git clone git@github.com:engi-network/deploy.git
      - run:
          name: 'Display TF_WORKSPACE'
          command: |
            echo TF_WORKSPACE=$TF_WORKSPACE
      - run:
          name: Create .terraformrc file locally
          command: |
            echo "credentials \"app.terraform.io\" {token =
            \"$TERRAFORM_TOKEN\"}" > $HOME/.terraformrc
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.1.9
      - terraform/init:
          path: << pipeline.parameters.terraform-setup >>
      - run:
          # the terraform/apply command built into the official orb unsets TF_WORKSPACE that won't work here
          name: 'terraform apply'
          command: |
            terraform -chdir="<< pipeline.parameters.terraform-setup >>" apply -auto-approve

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  deploy-staging:
    machine:
      image: ubuntu-2004:202201-01
    environment:
      TF_WORKSPACE: 'engi-website-staging'
    steps:
      - terraform-deploy
  deploy-production:
    machine:
      image: ubuntu-2004:202201-01
    environment:
      TF_WORKSPACE: 'engi-website-production'
    steps:
      - terraform-deploy

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-test-push-workflow:
    jobs:
      - aws-ecr/build-and-push-image:
          name: 'build-and-push-staging'
          repo: 'engi-website-staging'
          create-repo: true
          tag: latest
          registry-id: AWS_ID
          context:
            - aws
      - aws-ecr/build-and-push-image:
          filters:
            tags:
              only: /^v.*/
          name: 'build-and-push-production'
          repo: 'engi-website-production'
          create-repo: true
          tag: latest
          registry-id: AWS_ID
          context:
            - aws
      - deploy-staging:
          requires:
            - build-and-push-staging
          context:
            - github
            - terraform
      - deploy-production:
          filters:
            tags:
              only: /^v.*/
          requires:
            - build-and-push-production
          context:
            - github
            - terraform
